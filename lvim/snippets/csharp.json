{
  "ConsoleLog": {
    "prefix": "cl",
    "body": [
      "console.log($1);"
    ]
  },
  "SolidStore": {
    "prefix": "sstore",
    "body": [
      "const [$1, set$1] = createStore($2);"
    ]
  },
  "SolidSwitch": {
    "prefix": "sswitch",
    "body": [
      "<Switch>",
      "  <Match when={$1}>",
      "    $2",
      "  </Match>",
      "</Switch>"
    ]
  },
  "SolidMatch": {
    "prefix": "smatch",
    "body": [
      "<Match when={$1}>",
      "  $2",
      "</Match>"
    ]
  },
  "SolidFor": {
    "prefix": "sfor",
    "body": [
      "<For each={$1}>",
      " {item} => ()",
      "</Match>"
    ]
  },
  "SolidShow": {
    "prefix": "sshow",
    "body": [
      "<Show when={$1}>",
      "  $2",
      "</Show>"
    ]
  },
  "CreateComponent": {
    "prefix": "scomp",
    "body": [
      "import { Component} from \"solid-js\";",
      "",
      "export interface $1Props {",
      "}",
      "",
      "export const $1: Component<$1Props> = (props: $1Props) => {",
      "",
      "const {state} = useWorkspaceCtx();",
      "const msg = (tx) => translate(state.messages, tx);",
      "",
      "return (",
      "<>",
      "</>)",
      "}"
    ]
  },
  "CreateSignal": {
    "prefix": "cs",
    "body": [
      "const [$1, set$1] = createSignal($2)"
    ],
    "description": "Create a SolidJS signal"
  },
  "CreateEffect": {
    "prefix": "ce",
    "body": [
      "createEffect(() => {",
      "$1",
      "});"
    ],
    "description": "SolidJS, createEffect"
  },
  "CreateEffectLog": {
    "prefix": "cel",
    "body": [
      "createEffect(() => {",
      "  console.log($1);",
      "});"
    ],
    "description": "SolidJS, createEffect"
  },
  "TanstackSolidcreateQuery": {
    "prefix": [
      "cq",
      "tsqcq"
    ],
    "body": [
      "const $1Query = createQuery({",
      "queryKey: () => [\"$2\"],",
      "queryFn: () => $3,",
      "});"
    ],
    "description": "Create a Tanstack Query for SolidJS"
  },
  "TanstackSolidcreateMutation": {
    "prefix": [
      "cm",
      "tsqcm"
    ],
    "body": [
      "const $1Mutation = createMutation({",
      "mutationFn: (body: $2) => $3,",
      "onSuccess: () => queryClient.invalidateQueries([\"$4\"]),",
      "});"
    ],
    "description": "Create a Tanstack Mutation for SolidJS"
  }
}
